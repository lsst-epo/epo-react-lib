@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:string";
@use "sass:color";
@use "variables";
@use "tokens";

// used by fluid-scale mixin
@function strip-unit($number) {
  @if meta.type-of($number) == "number" and not math.is-unitless($number) {
    @return math.div($number, $number * 0 + 1);
  }

  @return $number;
}

@function token($map) {
  @return map.get(tokens.$tokens, $map);
}

// convert px to em
@function px-to-em($px, $base: variables.$font-size-base-desktop) {
  @return math.div(strip-unit($px), strip-unit($base)) + 0em;
}

// convert pt to em
@function pt-to-em($pt, $base: variables.$font-size-base-desktop) {
  @return math.div(strip-unit($pt) * 1.333, strip-unit($base)) + 0em;
}

// encode colors
@function encode-color($string) {
  @if type-of($string) == "color" {
    $hex: string.slice(color.ie-hex-str($string), 4);
    $string: string.unquote("#{$hex}");
  }

  $string: "%23" + $string;

  @return $string;
}

// convert hex to rgb value
@function hex-to-rgb($string) {
  @return "#{red($string)}, #{green($string), #{blue($string)}}";
}

// return fluid-scale calc value
@function fluid-scale-calc(
  $max-value,
  $min-value,
  $max-vw: break(130),
  $min-vw: break(60)
) {
  @return calc(
    #{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}
  );
}

// get value from tokens colors map
@function palette($color) {
  @return map.get(token(colors), $color);
}

@function sass-palette($color) {
  @return map.get(variables.$sass-palette, $color);
}

// get value from $breakpoints map
@function break($break) {
  @return map.get(variables.$breakpoints, $break);
}

// get value from $container-widths map
@function container-width($width) {
  @return map.get(variables.$container-widths, $width);
}

// get value from $break map
@function padding($size) {
  @return map.get(variables.$padding-sizes, $size);
}

// get value from $font-weights map
@function font-weight($weight) {
  @return map.get(variables.$font-weights, $weight);
}

// get z-stack value
@function z-stack($name) {
  @return map.get(variables.$z-stack, $name);
}

// get a header value
@function header($name) {
  @return map.get(variables.$header, $name);
}
