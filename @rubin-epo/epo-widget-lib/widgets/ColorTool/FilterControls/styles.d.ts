/// <reference types="react" />
export declare const FilterContainer: import("styled-components").IStyledComponent<"web", {
    ref?: import("react").LegacyRef<HTMLFieldSetElement> | undefined;
    key?: import("react").Key | null | undefined;
    disabled?: boolean | undefined;
    form?: string | undefined;
    name?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    style?: import("react").CSSProperties | undefined;
    tabIndex?: number | undefined;
    title?: string | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: import("react").AriaRole | undefined;
    about?: string | undefined;
    content?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "text" | "search" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    children?: import("react").ReactNode;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "true" | "false") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "true" | "false") | undefined;
    "aria-checked"?: boolean | "true" | "false" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "step" | "true" | "false" | "page" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "true" | "false") | undefined;
    "aria-dropeffect"?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "true" | "false") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "true" | "false") | undefined;
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
    "aria-hidden"?: (boolean | "true" | "false") | undefined;
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "true" | "false") | undefined;
    "aria-multiline"?: (boolean | "true" | "false") | undefined;
    "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "true" | "false" | "mixed" | undefined;
    "aria-readonly"?: (boolean | "true" | "false") | undefined;
    "aria-relevant"?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "true" | "false") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "true" | "false") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: import("react").ClipboardEventHandler<HTMLFieldSetElement> | undefined;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLFieldSetElement> | undefined;
    onCut?: import("react").ClipboardEventHandler<HTMLFieldSetElement> | undefined;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLFieldSetElement> | undefined;
    onPaste?: import("react").ClipboardEventHandler<HTMLFieldSetElement> | undefined;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLFieldSetElement> | undefined;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLFieldSetElement> | undefined;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLFieldSetElement> | undefined;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLFieldSetElement> | undefined;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLFieldSetElement> | undefined;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLFieldSetElement> | undefined;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLFieldSetElement> | undefined;
    onFocus?: import("react").FocusEventHandler<HTMLFieldSetElement> | undefined;
    onFocusCapture?: import("react").FocusEventHandler<HTMLFieldSetElement> | undefined;
    onBlur?: import("react").FocusEventHandler<HTMLFieldSetElement> | undefined;
    onBlurCapture?: import("react").FocusEventHandler<HTMLFieldSetElement> | undefined;
    onChange?: import("react").FormEventHandler<HTMLFieldSetElement> | undefined;
    onChangeCapture?: import("react").FormEventHandler<HTMLFieldSetElement> | undefined;
    onBeforeInput?: import("react").FormEventHandler<HTMLFieldSetElement> | undefined;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLFieldSetElement> | undefined;
    onInput?: import("react").FormEventHandler<HTMLFieldSetElement> | undefined;
    onInputCapture?: import("react").FormEventHandler<HTMLFieldSetElement> | undefined;
    onReset?: import("react").FormEventHandler<HTMLFieldSetElement> | undefined;
    onResetCapture?: import("react").FormEventHandler<HTMLFieldSetElement> | undefined;
    onSubmit?: import("react").FormEventHandler<HTMLFieldSetElement> | undefined;
    onSubmitCapture?: import("react").FormEventHandler<HTMLFieldSetElement> | undefined;
    onInvalid?: import("react").FormEventHandler<HTMLFieldSetElement> | undefined;
    onInvalidCapture?: import("react").FormEventHandler<HTMLFieldSetElement> | undefined;
    onLoad?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onLoadCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onError?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onErrorCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLFieldSetElement> | undefined;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLFieldSetElement> | undefined;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLFieldSetElement> | undefined;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLFieldSetElement> | undefined;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLFieldSetElement> | undefined;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLFieldSetElement> | undefined;
    onAbort?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onAbortCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onCanPlay?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onDurationChange?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onEmptied?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onEncrypted?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onEnded?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onEndedCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onLoadedData?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onLoadStart?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onPause?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onPauseCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onPlay?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onPlayCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onPlaying?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onProgress?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onProgressCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onRateChange?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onResize?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onResizeCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onSeeked?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onSeeking?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onStalled?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onStalledCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onSuspend?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onVolumeChange?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onWaiting?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onAuxClick?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onClick?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onClickCapture?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onContextMenu?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onDoubleClick?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onDrag?: import("react").DragEventHandler<HTMLFieldSetElement> | undefined;
    onDragCapture?: import("react").DragEventHandler<HTMLFieldSetElement> | undefined;
    onDragEnd?: import("react").DragEventHandler<HTMLFieldSetElement> | undefined;
    onDragEndCapture?: import("react").DragEventHandler<HTMLFieldSetElement> | undefined;
    onDragEnter?: import("react").DragEventHandler<HTMLFieldSetElement> | undefined;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLFieldSetElement> | undefined;
    onDragExit?: import("react").DragEventHandler<HTMLFieldSetElement> | undefined;
    onDragExitCapture?: import("react").DragEventHandler<HTMLFieldSetElement> | undefined;
    onDragLeave?: import("react").DragEventHandler<HTMLFieldSetElement> | undefined;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLFieldSetElement> | undefined;
    onDragOver?: import("react").DragEventHandler<HTMLFieldSetElement> | undefined;
    onDragOverCapture?: import("react").DragEventHandler<HTMLFieldSetElement> | undefined;
    onDragStart?: import("react").DragEventHandler<HTMLFieldSetElement> | undefined;
    onDragStartCapture?: import("react").DragEventHandler<HTMLFieldSetElement> | undefined;
    onDrop?: import("react").DragEventHandler<HTMLFieldSetElement> | undefined;
    onDropCapture?: import("react").DragEventHandler<HTMLFieldSetElement> | undefined;
    onMouseDown?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onMouseEnter?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onMouseLeave?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onMouseMove?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onMouseOut?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onMouseOver?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onMouseUp?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLFieldSetElement> | undefined;
    onSelect?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onSelectCapture?: import("react").ReactEventHandler<HTMLFieldSetElement> | undefined;
    onTouchCancel?: import("react").TouchEventHandler<HTMLFieldSetElement> | undefined;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLFieldSetElement> | undefined;
    onTouchEnd?: import("react").TouchEventHandler<HTMLFieldSetElement> | undefined;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLFieldSetElement> | undefined;
    onTouchMove?: import("react").TouchEventHandler<HTMLFieldSetElement> | undefined;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLFieldSetElement> | undefined;
    onTouchStart?: import("react").TouchEventHandler<HTMLFieldSetElement> | undefined;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLFieldSetElement> | undefined;
    onPointerDown?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onPointerMove?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onPointerUp?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onPointerCancel?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onPointerEnter?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onPointerLeave?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onPointerOver?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onPointerOut?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLFieldSetElement> | undefined;
    onScroll?: import("react").UIEventHandler<HTMLFieldSetElement> | undefined;
    onScrollCapture?: import("react").UIEventHandler<HTMLFieldSetElement> | undefined;
    onWheel?: import("react").WheelEventHandler<HTMLFieldSetElement> | undefined;
    onWheelCapture?: import("react").WheelEventHandler<HTMLFieldSetElement> | undefined;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLFieldSetElement> | undefined;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLFieldSetElement> | undefined;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLFieldSetElement> | undefined;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLFieldSetElement> | undefined;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLFieldSetElement> | undefined;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLFieldSetElement> | undefined;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLFieldSetElement> | undefined;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLFieldSetElement> | undefined;
}>;
export declare const HiddenCheckbox: import("styled-components").IStyledComponent<"web", {
    ref?: import("react").LegacyRef<HTMLInputElement> | undefined;
    key?: import("react").Key | null | undefined;
    accept?: string | undefined;
    alt?: string | undefined;
    autoComplete?: string | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    checked?: boolean | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    disabled?: boolean | undefined;
    enterKeyHint?: "search" | "done" | "enter" | "go" | "next" | "previous" | "send" | undefined;
    form?: string | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    height?: string | number | undefined;
    list?: string | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    name?: string | undefined;
    pattern?: string | undefined;
    placeholder?: string | undefined;
    readOnly?: boolean | undefined;
    required?: boolean | undefined;
    size?: number | undefined;
    src?: string | undefined;
    step?: string | number | undefined;
    type?: import("react").HTMLInputTypeAttribute | undefined;
    value?: string | number | readonly string[] | undefined;
    width?: string | number | undefined;
    onChange?: import("react").ChangeEventHandler<HTMLInputElement> | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    slot?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    style?: import("react").CSSProperties | undefined;
    tabIndex?: number | undefined;
    title?: string | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: import("react").AriaRole | undefined;
    about?: string | undefined;
    content?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "text" | "search" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    children?: import("react").ReactNode;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "true" | "false") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "true" | "false") | undefined;
    "aria-checked"?: boolean | "true" | "false" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "step" | "true" | "false" | "page" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "true" | "false") | undefined;
    "aria-dropeffect"?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "true" | "false") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "true" | "false") | undefined;
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
    "aria-hidden"?: (boolean | "true" | "false") | undefined;
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "true" | "false") | undefined;
    "aria-multiline"?: (boolean | "true" | "false") | undefined;
    "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "true" | "false" | "mixed" | undefined;
    "aria-readonly"?: (boolean | "true" | "false") | undefined;
    "aria-relevant"?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "true" | "false") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "true" | "false") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
    onCut?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
    onPaste?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
    onFocus?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
    onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
    onBlur?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
    onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
    onChangeCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
    onBeforeInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
    onInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
    onInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
    onReset?: import("react").FormEventHandler<HTMLInputElement> | undefined;
    onResetCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
    onSubmit?: import("react").FormEventHandler<HTMLInputElement> | undefined;
    onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
    onInvalid?: import("react").FormEventHandler<HTMLInputElement> | undefined;
    onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
    onLoad?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onError?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLInputElement> | undefined;
    onAbort?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onDurationChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onEmptied?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onEncrypted?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onEnded?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedData?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onLoadStart?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onPause?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onPlaying?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onProgress?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onRateChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onResize?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onResizeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onSeeked?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onSeeking?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onStalled?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onSuspend?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onWaiting?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onAuxClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onContextMenu?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onDrag?: import("react").DragEventHandler<HTMLInputElement> | undefined;
    onDragCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
    onDragEnd?: import("react").DragEventHandler<HTMLInputElement> | undefined;
    onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
    onDragEnter?: import("react").DragEventHandler<HTMLInputElement> | undefined;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
    onDragExit?: import("react").DragEventHandler<HTMLInputElement> | undefined;
    onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
    onDragLeave?: import("react").DragEventHandler<HTMLInputElement> | undefined;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
    onDragOver?: import("react").DragEventHandler<HTMLInputElement> | undefined;
    onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
    onDragStart?: import("react").DragEventHandler<HTMLInputElement> | undefined;
    onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
    onDrop?: import("react").DragEventHandler<HTMLInputElement> | undefined;
    onDropCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
    onMouseDown?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onMouseMove?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOut?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOver?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onMouseUp?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onSelect?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
    onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
    onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
    onTouchMove?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
    onTouchStart?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
    onPointerDown?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onPointerMove?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onPointerUp?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOver?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOut?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
    onScroll?: import("react").UIEventHandler<HTMLInputElement> | undefined;
    onScrollCapture?: import("react").UIEventHandler<HTMLInputElement> | undefined;
    onWheel?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
    onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
}>;
export declare const FilterToggle: import("styled-components").IStyledComponent<"web", {
    cite?: string | undefined;
    data?: string | undefined;
    form?: string | undefined;
    label?: string | undefined;
    span?: number | undefined;
    style?: import("react").CSSProperties | undefined;
    summary?: string | undefined;
    pattern?: string | undefined;
    className?: string | undefined;
    color?: string | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    slot?: string | undefined;
    title?: string | undefined;
    as?: string | undefined;
    key?: import("react").Key | null | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    placeholder?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    tabIndex?: number | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: import("react").AriaRole | undefined;
    about?: string | undefined;
    content?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "text" | "search" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    children?: string | number | boolean | import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | Iterable<import("react").ReactNode> | import("react").ReactPortal | null | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "true" | "false") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "true" | "false") | undefined;
    "aria-checked"?: boolean | "true" | "false" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "step" | "true" | "false" | "page" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "true" | "false") | undefined;
    "aria-dropeffect"?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "true" | "false") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "true" | "false") | undefined;
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
    "aria-hidden"?: (boolean | "true" | "false") | undefined;
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "true" | "false") | undefined;
    "aria-multiline"?: (boolean | "true" | "false") | undefined;
    "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "true" | "false" | "mixed" | undefined;
    "aria-readonly"?: (boolean | "true" | "false") | undefined;
    "aria-relevant"?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "true" | "false") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "true" | "false") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
    onCut?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
    onPaste?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
    onFocus?: import("react").FocusEventHandler<HTMLButtonElement> | undefined;
    onFocusCapture?: import("react").FocusEventHandler<HTMLButtonElement> | undefined;
    onBlur?: import("react").FocusEventHandler<HTMLButtonElement> | undefined;
    onBlurCapture?: import("react").FocusEventHandler<HTMLButtonElement> | undefined;
    onChange?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
    onChangeCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
    onBeforeInput?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
    onInput?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
    onInputCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
    onReset?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
    onResetCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
    onSubmit?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
    onSubmitCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
    onInvalid?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
    onInvalidCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
    onLoad?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onLoadCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onError?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onErrorCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLButtonElement> | undefined;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLButtonElement> | undefined;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLButtonElement> | undefined;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLButtonElement> | undefined;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLButtonElement> | undefined;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLButtonElement> | undefined;
    onAbort?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onAbortCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onCanPlay?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onDurationChange?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onEmptied?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onEncrypted?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onEnded?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onEndedCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onLoadedData?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onLoadStart?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onPause?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onPauseCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onPlay?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onPlayCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onPlaying?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onProgress?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onProgressCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onRateChange?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onResize?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onResizeCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onSeeked?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onSeeking?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onStalled?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onStalledCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onSuspend?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onVolumeChange?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onWaiting?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onAuxClick?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onClick?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onClickCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onContextMenu?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onDoubleClick?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onDrag?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
    onDragCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
    onDragEnd?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
    onDragEndCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
    onDragEnter?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
    onDragExit?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
    onDragExitCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
    onDragLeave?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
    onDragOver?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
    onDragOverCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
    onDragStart?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
    onDragStartCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
    onDrop?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
    onDropCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
    onMouseDown?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseEnter?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseLeave?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseMove?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseOut?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseOver?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseUp?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
    onSelect?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onSelectCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
    onTouchCancel?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
    onTouchEnd?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
    onTouchMove?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
    onTouchStart?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
    onPointerDown?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerMove?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerUp?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerCancel?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerEnter?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerLeave?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerOver?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerOut?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
    onScroll?: import("react").UIEventHandler<HTMLButtonElement> | undefined;
    onScrollCapture?: import("react").UIEventHandler<HTMLButtonElement> | undefined;
    onWheel?: import("react").WheelEventHandler<HTMLButtonElement> | undefined;
    onWheelCapture?: import("react").WheelEventHandler<HTMLButtonElement> | undefined;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLButtonElement> | undefined;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLButtonElement> | undefined;
    classID?: string | undefined;
    name?: string | undefined;
    type?: string | undefined;
    useMap?: string | undefined;
    wmode?: string | undefined;
    alt?: string | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    sizes?: string | undefined;
    src?: string | undefined;
    srcSet?: string | undefined;
    download?: any;
    href?: string | undefined;
    hrefLang?: string | undefined;
    media?: string | undefined;
    target?: string | undefined;
    coords?: string | undefined;
    shape?: string | undefined;
    autoPlay?: boolean | undefined;
    controls?: boolean | undefined;
    loop?: boolean | undefined;
    mediaGroup?: string | undefined;
    muted?: boolean | undefined;
    playsInline?: boolean | undefined;
    preload?: string | undefined;
    disabled?: boolean | undefined;
    formAction?: string | undefined;
    formEncType?: string | undefined;
    formMethod?: string | undefined;
    formNoValidate?: boolean | undefined;
    formTarget?: string | undefined;
    value?: string | number | readonly string[] | undefined;
    dateTime?: string | undefined;
    open?: boolean | undefined;
    acceptCharset?: string | undefined;
    action?: string | undefined;
    autoComplete?: string | undefined;
    encType?: string | undefined;
    method?: string | undefined;
    noValidate?: boolean | undefined;
    manifest?: string | undefined;
    allowFullScreen?: boolean | undefined;
    allowTransparency?: boolean | undefined;
    frameBorder?: string | number | undefined;
    marginHeight?: number | undefined;
    marginWidth?: number | undefined;
    sandbox?: string | undefined;
    scrolling?: string | undefined;
    seamless?: boolean | undefined;
    srcDoc?: string | undefined;
    accept?: string | undefined;
    capture?: boolean | "user" | "environment" | undefined;
    checked?: boolean | undefined;
    list?: string | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    min?: string | number | undefined;
    minLength?: number | undefined;
    multiple?: boolean | undefined;
    readOnly?: boolean | undefined;
    required?: boolean | undefined;
    size?: number | undefined;
    step?: string | number | undefined;
    challenge?: string | undefined;
    keyType?: string | undefined;
    keyParams?: string | undefined;
    htmlFor?: string | undefined;
    integrity?: string | undefined;
    charSet?: string | undefined;
    httpEquiv?: string | undefined;
    high?: number | undefined;
    low?: number | undefined;
    optimum?: number | undefined;
    reversed?: boolean | undefined;
    start?: number | undefined;
    selected?: boolean | undefined;
    async?: boolean | undefined;
    defer?: boolean | undefined;
    scoped?: boolean | undefined;
    cellPadding?: string | number | undefined;
    cellSpacing?: string | number | undefined;
    colSpan?: number | undefined;
    headers?: string | undefined;
    rowSpan?: number | undefined;
    scope?: string | undefined;
    cols?: number | undefined;
    rows?: number | undefined;
    wrap?: string | undefined;
    default?: boolean | undefined;
    kind?: string | undefined;
    srcLang?: string | undefined;
    poster?: string | undefined;
    icon?: "Account" | "ArrowUpFromBracket" | "Backward" | "BackwardStep" | "Calendar" | "Cancel" | "CaretDown" | "CheckeredFlag" | "Checkmark" | "CheckmarkCircle" | "CircularLoader" | "Chevron" | "ChevronLeftElongated" | "ChevronRightElongated" | "ChevronThin" | "Close" | "CloseCircle" | "Cloud" | "Doc" | "DocArrowRight" | "DocInverted" | "Email" | "Expand" | "Eye" | "Facebook" | "FloppyDisk" | "Forward" | "ForwardStep" | "Globe" | "Google" | "Hamburger" | "Info" | "InfoCircle" | "Instagram" | "Lightbulb" | "LinkedIn" | "LockClosed" | "LockOpen" | "LogOut" | "Mail" | "Minus" | "Page" | "Pause" | "Phone" | "Pin" | "Play" | "Plus" | "QuestionCircle" | "RotateLeft" | "RotateLeftWithCenter" | "Search" | "ShareCopyUrl" | "ShareEmail" | "ShareFacebook" | "ShareToggle" | "ShareTwitter" | "Team" | "Temp" | "Thumbtack" | "Time" | "Timer" | "Twitter" | "User" | "UserInverted" | "Video" | "YouTube" | "Pdf" | "Word" | undefined;
    iconSize?: string | number | undefined;
    isBlock?: boolean | undefined;
    styleAs?: import("@rubin-epo/epo-react-lib/Button").ButtonStyleAs | undefined;
    isInactive?: boolean | undefined;
    ref?: import("react").Ref<HTMLButtonElement> | undefined;
}> & import("react").ForwardRefExoticComponent<Omit<import("react").PropsWithChildren<import("@rubin-epo/epo-react-lib/Button").ButtonProps>, "ref"> & import("react").RefAttributes<HTMLButtonElement>>;
export declare const FilterLabel: import("styled-components").IStyledComponent<"web", {
    ref?: import("react").LegacyRef<HTMLLabelElement> | undefined;
    key?: import("react").Key | null | undefined;
    form?: string | undefined;
    htmlFor?: string | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    style?: import("react").CSSProperties | undefined;
    tabIndex?: number | undefined;
    title?: string | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: import("react").AriaRole | undefined;
    about?: string | undefined;
    content?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "text" | "search" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    children?: import("react").ReactNode;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "true" | "false") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "true" | "false") | undefined;
    "aria-checked"?: boolean | "true" | "false" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "step" | "true" | "false" | "page" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "true" | "false") | undefined;
    "aria-dropeffect"?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "true" | "false") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "true" | "false") | undefined;
    "aria-haspopup"?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
    "aria-hidden"?: (boolean | "true" | "false") | undefined;
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "true" | "false") | undefined;
    "aria-multiline"?: (boolean | "true" | "false") | undefined;
    "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "true" | "false" | "mixed" | undefined;
    "aria-readonly"?: (boolean | "true" | "false") | undefined;
    "aria-relevant"?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "true" | "false") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "true" | "false") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
    onCut?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
    onPaste?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLLabelElement> | undefined;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLLabelElement> | undefined;
    onFocus?: import("react").FocusEventHandler<HTMLLabelElement> | undefined;
    onFocusCapture?: import("react").FocusEventHandler<HTMLLabelElement> | undefined;
    onBlur?: import("react").FocusEventHandler<HTMLLabelElement> | undefined;
    onBlurCapture?: import("react").FocusEventHandler<HTMLLabelElement> | undefined;
    onChange?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onChangeCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onBeforeInput?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onInput?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onInputCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onReset?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onResetCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onSubmit?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onSubmitCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onInvalid?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onInvalidCapture?: import("react").FormEventHandler<HTMLLabelElement> | undefined;
    onLoad?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onError?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onErrorCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLLabelElement> | undefined;
    onAbort?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onAbortCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onCanPlay?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onDurationChange?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onEmptied?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onEncrypted?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onEnded?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onEndedCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadedData?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadStart?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onPause?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onPauseCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onPlay?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onPlayCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onPlaying?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onProgress?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onProgressCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onRateChange?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onResize?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onResizeCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onSeeked?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onSeeking?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onStalled?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onStalledCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onSuspend?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onVolumeChange?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onWaiting?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onAuxClick?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onClick?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onClickCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onContextMenu?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onDoubleClick?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onDrag?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragEnd?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragEndCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragEnter?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragExit?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragExitCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragLeave?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragOver?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragOverCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragStart?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDragStartCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDrop?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onDropCapture?: import("react").DragEventHandler<HTMLLabelElement> | undefined;
    onMouseDown?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseEnter?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseLeave?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseMove?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseOut?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseOver?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseUp?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLLabelElement> | undefined;
    onSelect?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onSelectCapture?: import("react").ReactEventHandler<HTMLLabelElement> | undefined;
    onTouchCancel?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchEnd?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchMove?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchStart?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLLabelElement> | undefined;
    onPointerDown?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerMove?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerUp?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerCancel?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerEnter?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerLeave?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerOver?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerOut?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLLabelElement> | undefined;
    onScroll?: import("react").UIEventHandler<HTMLLabelElement> | undefined;
    onScrollCapture?: import("react").UIEventHandler<HTMLLabelElement> | undefined;
    onWheel?: import("react").WheelEventHandler<HTMLLabelElement> | undefined;
    onWheelCapture?: import("react").WheelEventHandler<HTMLLabelElement> | undefined;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLLabelElement> | undefined;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLLabelElement> | undefined;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLLabelElement> | undefined;
}>;
export declare const Slider: import("styled-components").IStyledComponent<"web", {
    onChangeCallback: ((value: number | readonly number[], index: number) => void) | undefined;
    label: string;
    minLabel?: string | undefined;
    maxLabel?: string | undefined;
    labelledbyId?: string | undefined;
    color?: string | undefined;
    darkMode?: boolean | undefined;
    isDisabled?: boolean | undefined;
    className?: string | undefined;
    defaultValue?: number | readonly number[] | undefined;
    value?: number | readonly number[] | undefined;
    max?: number | undefined;
    min?: number | undefined;
    step?: number | undefined;
    ariaValuetext?: string | ((value: {
        index: number;
        value: number | readonly number[];
        valueNow: number;
    }) => string) | undefined;
}> & import("react").FunctionComponent<import("@rubin-epo/epo-react-lib/HorizontalSlider").HorizontalSliderProps>;
