@use "abstracts/functions";
@use "abstracts/mixins/base";
@use "abstracts/variables";

// Layout mixins
// -------------------

// Containers
// --------------------------------------------------------
@mixin proto-container(
  $max-width: functions.container-width(wide),
  $wide-padding: functions.padding(large),
  $narrow-padding: functions.padding(small)
) {
  @include base.fluid-scale(
    max-width,
    $max-width + 2 * $wide-padding,
    $max-width + 2 * $narrow-padding
  );
  @include base.fluid-scale(
    padding-right padding-left,
    $wide-padding,
    $narrow-padding
  );

  margin-right: auto;
  margin-left: auto;
}

@mixin container-max {
  @include proto-container(functions.container-width(max));
}

@mixin container-full {
  @include proto-container(functions.container-width(full));
}

@mixin container-wide {
  @include proto-container(functions.container-width(wide));
}

@mixin container-regular {
  @include proto-container(functions.container-width(regular));
}

@mixin container-narrow {
  @include proto-container(functions.container-width(narrow));
}

@mixin container-full-bleed($width: "max") {
  width: 100%;
  max-width: functions.container-width($width);
  margin-right: auto;
  margin-left: auto;
}

@mixin container-inner {
  @include base.fluid-scale(
    padding-right padding-left,
    functions.padding(large),
    functions.padding(small)
  );
}

@mixin gap($property: "gap", $gap-desktop, $gap-mobile) {
  @if $gap-desktop == $gap-mobile {
    #{$property}: $gap-desktop;
  } @else {
    @include base.fluid-scale($property, $gap-desktop, $gap-mobile);
  }
}

@mixin grid(
  $columns: 2,
  $gap-desktop: functions.padding(large),
  $gap-mobile: functions.padding(small),
  $break: functions.break(tablet)
) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);

  @include gap(gap, $gap-desktop, $gap-mobile);

  @include base.respond($break) {
    > * {
      grid-column: span $columns;
    }
  }
}
